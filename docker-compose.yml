version: '3.8'

services:
  # Dashboard DevSecOps principal
  devsecops-dashboard:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: devsecops-dashboard
    ports:
      - "5001:5000"  # Port différent pour éviter le conflit
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://devsecops:devsecops123@postgres:5432/devsecops_db
      - REDIS_URL=redis://redis:6379
      - WEBHOOK_SECRET=${WEBHOOK_SECRET:-changeme}
      - SESSION_SECRET=${SESSION_SECRET:-changeme}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - devsecops-network
    restart: unless-stopped

  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: postgres-db
    environment:
      - POSTGRES_DB=devsecops_db
      - POSTGRES_USER=devsecops
      - POSTGRES_PASSWORD=devsecops123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docs/sql:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"  # Port différent pour éviter les conflits
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devsecops -d devsecops_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - devsecops-network
    restart: unless-stopped

  # SonarQube pour l'analyse de code
  sonarqube:
    image: sonarqube:10-community
    container_name: sonarqube
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://postgres:5432/sonarqube_db
      - SONAR_JDBC_USERNAME=sonarqube
      - SONAR_JDBC_PASSWORD=sonarqube123
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
    ports:
      - "9000:9000"
    depends_on:
      postgres-sonar:
        condition: service_healthy
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    networks:
      - devsecops-network
    restart: unless-stopped

  # Base de données dédiée à SonarQube
  postgres-sonar:
    image: postgres:15-alpine
    container_name: postgres-sonar
    environment:
      - POSTGRES_DB=sonarqube_db
      - POSTGRES_USER=sonarqube
      - POSTGRES_PASSWORD=sonarqube123
    volumes:
      - postgres_sonar_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sonarqube -d sonarqube_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - devsecops-network
    restart: unless-stopped

  # Redis pour le cache
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - devsecops-network
    restart: unless-stopped

  # Prometheus pour les métriques
  monitoring-agent:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    depends_on:
      - devsecops-dashboard
    networks:
      - devsecops-network
    restart: unless-stopped

  # Grafana pour la visualisation
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin123}
      - GF_USERS_VIEWERS_CAN_EDIT=false
      - GF_LOG_MODE=console
      - GF_LOG_LEVEL=info
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - monitoring-agent
    networks:
      - devsecops-network
    restart: unless-stopped

  # Nginx comme proxy
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/certs:/etc/nginx/certs
      - nginx_logs:/var/log/nginx
    depends_on:
      - devsecops-dashboard
      - sonarqube
      - grafana
    networks:
      - devsecops-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  postgres_sonar_data:
    driver: local
  sonarqube_data:
    driver: local
  sonarqube_logs:
    driver: local
  sonarqube_extensions:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  devsecops-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16